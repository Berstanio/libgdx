/*******************************************************************************
 * Copyright 2011 See AUTHORS file.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/

buildscript {
    repositories {
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://oss.sonatype.org/content/repositories/releases/" }
        mavenLocal()
    }
    dependencies {
        // Multi-OS Engine plugin
        //Is working!
        classpath group: 'org.multi-os-engine', name: 'moe-gradle', version: "1.9.0-SNAPSHOT"
        // Not working
        //classpath group: 'org.multi-os-engine', name: 'moe-gradle', version: "2.0.0-SNAPSHOT"

    }
}

// Apply plugins
apply plugin: 'eclipse'
apply plugin: 'moe'

sourceSets.main.java.srcDirs = ["src/main/java"]
sourceSets.main.resources.srcDirs = ["../gdx-tests-android/assets"]

// Set source and target to Java 8
sourceCompatibility = "1.8"
targetCompatibility = "1.8"

// Exclude all files from Gradle's test runner
test { exclude '**' }

configurations { natives }

// Extracts native libs (*.a) from the native-ios.jar and places them
// under build/libs/ios/.
task copyNatives  {
    doLast {
        file("xcode/native/ios/").mkdirs();
        def LD_FLAGS = "LIBGDX_NATIVES = "
        configurations.natives.files.each { jar ->
            def outputDir = null
            if (jar.name.matches(".*natives-ios.*")) outputDir = file("xcode/native/ios")
            if (outputDir != null) {
                FileCollection fileCollection = zipTree(jar)
                for (File libFile : fileCollection) {
                    if (libFile.getAbsolutePath().endsWith(".a") && !libFile.getAbsolutePath().contains("/tvos/")) {
                        copy {
                            from libFile.getAbsolutePath()
                            into outputDir
                        }
                        LD_FLAGS += " -force_load \${SRCROOT}/native/ios/" + libFile.getName()
                    }
                }
            }
        }
        def outFlags = file("xcode/LibGDXMissileCommand/custom.xcconfig");
        outFlags.write LD_FLAGS

        def proguard = file("proguard.append.cfg")
        if (!proguard.exists()) {
            proguard = new File("proguard.append.cfg")
            proguard << "\n-keep class com.badlogic.** { *; }\n"
            proguard << "-keep enum com.badlogic.** { *; }\n"
        }
    }
}

dependencies {
    compile project(":gdx")
    compile project(":tests:gdx-tests")
    compile project(":backends:gdx-backend-moe")
    natives testnatives.ios
    compileOnly "org.graalvm.nativeimage:svm:21.0.0.2"
}

// Setup Multi-OS Engine
moe {
/*    nativeImage {
        options = ["--features=com.badlogic.gdx.backends.svm.ConfigCollectionFeatureBase,com.badlogic.gdx.backends.svm.ConfigCollectionFeatureBullet"]
   }
  */   xcode {
        project 'xcode/IOSTests.xcodeproj'
        mainTarget 'IOSTests'
        testTarget 'IOSTests-Test'
    }
}

// Setup Eclipse
eclipse {
    // Set Multi-OS Engine nature
    project {
        natures 'org.multi-os-engine.project'
    }
}

moeMainReleaseIphoneosXcodeBuild.dependsOn copyNatives
moeMainDebugIphoneosXcodeBuild.dependsOn copyNatives
moeMainReleaseIphonesimulatorXcodeBuild.dependsOn copyNatives
moeMainDebugIphonesimulatorXcodeBuild.dependsOn copyNatives

if (System.getenv('PLATFORM_NAME') != null) {
    moeXcodeInternal.dependsOn copyNatives
}
